<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta name="robots" content="noindex, nofollow">
    <meta name="googlebot" content="noindex, nofollow">
    <script type="text/javascript" src="//code.jquery.com/jquery-1.10.1.js"></script>
    <script type="text/javascript" src="mqttws31.js"></script>
    
    <script type='text/javascript'>
        //<![CDATA[

        //Using the HiveMQ public Broker, with a random client Id
        var client = new Messaging.Client("broker.mqttdashboard.com", 8000, "myclientid_" + parseInt(Math.random() * 100, 10));

        //Gets  called if the websocket/mqtt connection gets disconnected for any reason
        client.onConnectionLost = function (responseObject) {
            //Depending on your scenario you could implement a reconnect logic here
            alert("connection lost: " + responseObject.errorMessage);
        };

        //Gets called whenever you receive a message for your subscriptions
        client.onMessageArrived = function (message) {
            //Do something with the push message you received
            $('#messages').append('<span>Topic: ' + message.destinationName + '  | ' + message.payloadString + '</span><br/>');
        };

        //Connect Options
        var options = {
            timeout: 3,
            //Gets Called if the connection has sucessfully been established
            onSuccess: function () {
                alert("Connected");
            },
            //Gets Called if the connection could not be established
            onFailure: function (message) {
                alert("Connection failed: " + message.errorMessage);
            }
        };

        //Creates a new Messaging.Message Object and sends it to the HiveMQ MQTT Broker
        var publish = function (payload, topic, qos) {
            //Send your message (also possible to serialize it as JSON or protobuf or just use a string, no limitations)
            var message = new Messaging.Message(payload);
            message.destinationName = topic;
            message.qos = qos;
            client.send(message);
        }
        //]]>

    </script>

</head>

<body>
    <button onclick="client.connect(options);">1. Connect</button>
    <button onclick="client.subscribe('testtopic/#', {qos: 2}); alert('Subscribed');">2. Subscribe</button>
    <button onclick="publish('Hello Foo !','testtopic/bar',2);">3. Publish</button>
    <button onclick="client.disconnect();">(4. Disconnect)</button>
    <div id="messages"></div>

</body>

</html>